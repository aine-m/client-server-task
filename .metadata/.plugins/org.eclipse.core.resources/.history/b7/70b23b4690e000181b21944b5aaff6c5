package datumizeclient.component;

import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.concurrent.Executors;

//https://codereview.stackexchange.com/questions/39123/synchronous-and-asynchronous-behavior-for-client

public class AppClient extends AbstractRemoteCall<String> {

	private final String baseUrl = "http://localhost:8080";

	public AppClient() {
		super(Executors.newFixedThreadPool(5));
	}

	public String executeSynchronous(RequestTypes requestType) throws Exception {
		HttpURLConnection con;
		String response;
		
		if(requestType.equals(RequestTypes.GET)){
			con = createGetConn();
		}else if(requestType.equals(RequestTypes.POST)) {
			Random rand = new Random();
			float addVal = rand.nextFloat() * 10;
			System.out.println("POST add value: " + String.valueOf(addVal));
			
			con = createPostConn(addVal);
		}else {
			URL url = new URL(baseUrl);
			con = (HttpURLConnection) url.openConnection();
		}
		
		
		System.out.println(con.getContent()); 
		
		con.connect();
		response = Integer.toString(con.getResponseCode());
		response.concat(con.getResponseMessage());
		System.out.println(response);
		return response;
	}
	


	// create a URL
	private HttpURLConnection createGetConn() throws Exception {
		String urlString = baseUrl.concat("/GetValue");
		URL url = new URL(urlString);
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		con.setDoOutput(true);
		con.setRequestMethod("GET");

		return con;
	}

	// create a URL
	private HttpURLConnection createPostConn(float addVal) throws Exception {
		String urlParams = "/?AddValue=".concat(String.valueOf(addVal));
		byte[] postData = urlParams.getBytes(StandardCharsets.UTF_8);

		URL url = new URL(baseUrl);
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		con.setDoOutput(true);
		con.setRequestMethod("POST");
		con.setRequestProperty("Content-Type", "application/json");
		con.setRequestProperty("charset", "utf-8");
		con.setRequestProperty("Content-Length", Integer.toString(postData.length));
		con.setDoOutput(true);
		con.getOutputStream().write(postData);
		
//		try {
//			DataOutputStream wr = new DataOutputStream(con.getOutputStream());
//			wr.write(postData);
//			wr.close();
//		} catch (Exception e) {
//			e.printStackTrace();
//		} 
		
		return con;
	}



}
